#!/bin/bash
function _gen_custom_file() {
  custom_file_init=$custom_file.init
  custom_profile_init=$custom_profile.init
  if [ ! -f $custom_profile_init ] && [ ! -f $custom_profile ]
  then
    cat <<'EOF' >  $custom_profile
export default_show_funcs=''  # valid values: custom/system/all
EOF
  fi
  touch $custom_profile_init

  if [ ! -f $custom_file_init ] && [ ! -f $custom_file ]
  then
    read -p "Cannt find $custom_file, do you want to ceate it [y/N]? " yN
    ([ "$yN" == 'y' ] || [ "$yN" == 'Y' ]) && \
      cat <<'EOF' > $custom_file
#/bin/bash
# The useful_tool_collections.custom file is for custom functions, and won't be updated from repository.
# Please check if the file exists in .gitignore
#
# Naming convention of custom functions
# 1. no space before syntax 'function'
# 2. put help message of function with the following pattern:
#    '# E.g. <function name> <options/arguments>'
#    '# E.g. _<function name> <options/arguments>'
#    PS. the private methods (w/ leading "_") won't be shown in help manual


# E.g. helloworld_public_custom
function helloworld_public_custom() {
  echo 'Hello World, public custom!'
}


# E.g. _helloworld_private_custom
function _helloworld_private_custom() {
  echo 'Hello World, private custom!'
}
EOF
  fi
  touch $custom_file_init
}


function get_subcommand_list() {
  grep '^function [^_]' $0 ${0/.sh}.custom | cut -d' ' -f2 | cut -d'(' -f1
}


# Hidden function, check if it is a function.
# E.g. _is_function
function _is_function() {
  [ ! -z "$1" ] && typeset -F $1 >/dev/null 2>&1 || return 1
}


# E.g.
# length < 7, mask all, ******
# length = 7, mask first 6, *******7
# length > 7, mask all except last 2, ******78
function _mask() {
  string="$1"
  len_str=${#string}
  len_mask=$(($len_str-2))
  mask_char='\*'

  if [ $len_str -lt 7 ]
  then
    echo "$(_repeat $mask_char $len_str)"
  elif [ $len_str -eq 7 ]
  then
    echo "$(_repeat $mask_char 6)${string:6:1}"
  else
    echo "$(_repeat $mask_char $len_mask)${string:$len_mask:2}"
  fi
}


# E.g. readme
function readme() {
  _readme_file="$(dirname $0)/README.md"
  [ ! -f "$_readme_file" ] && echo 'README.md not found!' && return 1
  echo "Open README.md ($_readme_file)..."
  open $_readme_file
}


function _repeat() {
  printf %$2s | tr " " "$1"
}


function _show_func_list() {
  [ $# -eq 0 ] && return
  cat <<EOF
$( [ "$2" == 'custom' ] && echo 'Custom ' )Function List:
$_sep
EOF
  [ -f "$1" ] && \
    grep '^function [^_]' $1 | cut -d ' ' -f2 | cut -d '(' -f1 | egrep -v "$excluded_func_regex" | sed -e 's/^/  /'
  echo ''
}


function _show_func_eg_list() {
  [ $# -eq 0 ] && return
  cat <<EOF
$( [ "$2" == 'custom' ] && echo 'Custom ' )Function E.g.
$_sep
EOF
  [ -f "$1" ] && \
    grep '^# E.g. [^_]' $1 | sed -e "s|^#[ ]*E.g.[ ]*|  $0 |" | egrep -v "  $0 $excluded_func_regex"
  echo ''
}


function _stderr() {
  echo $@ >&2
}


# E.g. vi [custom/password/utils/sh]
function vi() {
  if [ -f "$1" ]
  then
    vim "$1"
  elif [ -f "${0/.sh}.${1:-sh}" ]
  then
    vim "${0/.sh}.${1:-sh}"
  else
    echo "File ($1) not found!" && exit 1
  fi
}
