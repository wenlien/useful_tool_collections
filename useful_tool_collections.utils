#!/bin/bash
function stderr() {
  echo $@ >&2
}


function _gen_custom_file() {
  custom_file_init=$custom_file.init
  if [ ! -f $custom_file_init ] && [ ! -f $custom_file ]
  then
    read -p "Cannt find $custom_file, do you want to ceate it [y/N]? " yN
    ([ "$yN" == 'y' ] || [ "$yN" == 'Y' ]) && \
      cat <<'EOF' > $custom_file
#/bin/bash
# The useful_tool_collections.custom file is for custom functions, and won't be updated from repository.
# Please check if the file exists in .gitignore
#
# Naming convention of custom functions
# 1. no space before syntax 'function'
# 2. put help message of function with the following pattern:
#    '# E.g. <function name> <options/arguments>'
#    '# E.g. _<function name> <options/arguments>'
#    PS. the private methods (w/ leading "_") won't be shown in help manual


# E.g. helloworld_public_custom
function helloworld_public_custom() {
  echo 'Hello World, public custom!'
}


# E.g. _helloworld_private_custom
function _helloworld_private_custom() {
  echo 'Hello World, private custom!'
}
EOF
  fi
  touch $custom_file_init
}


function get_subcommand_list() {
  grep '^function [^_]' $0 | cut -d' ' -f2 | cut -d'(' -f1
}


# Hidden function, check if it is a function.
# E.g. _is_function
function _is_function() {
  [ ! -z "$1" ] && typeset -F $1 >/dev/null 2>&1 || return 1
}


# E.g. readme
function readme() {
  open $(dirname $0)/README.md
}


function repeat() {
  printf %$2s | tr " " "$1"
}


# E.g. vi [custom/password/utils/sh]
function vi() {
  vim ${0/.sh}.${1:-sh}
}
